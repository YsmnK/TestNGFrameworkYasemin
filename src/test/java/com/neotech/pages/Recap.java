package com.neotech.pages;

public class Recap {
	
//	Maven - is a build automation tool for Java projects (Gradle, Ant)
//
//	Why automation testers use Maven?
//	1. Build the project structure (folder)
//	2. Manage Dependencies
//	3. Run automation scripts from command line
//
//	To create the Maven Project:
//	File --> New Project --> Maven --> Maven Project --> Create a simple project -->
//		Group Id == company/organization (com.neotech)
//		Artifact Id == projectName (TestNGFramework) --> click Finish
//
//	In your Maven Project
//		main - application code (for developer)
//		test - test code (for testers)
//		pom.xml - this is the heart of maven project where we will store all configurations
//		target - everything generated by maven (compiled code and reports)
//
//	--------------------------------
//	POM - Page Object Model - is a design pattern (NOT A FRAMEWORK)
//	Main concept:
//		for each webpage we will build separate java class where we will store all page related elements and methods that can be performed
//	POM can be achieved in 2 ways:
//		without PageFactory
//		with PageFactory
//	--------------------------------
//	pom.xml --> maven dependencies
//
//	Add this line of code for Maven to use Java 1.8
//	<properties>
//	    <maven.compiler.source>1.8</maven.compiler.source>
//	    <maven.compiler.target>1.8</maven.compiler.target>
//	</properties>
//
//	Dependencies - your project will have a dependency of tools that are needed for your project. Now instead of downloading all the jar files manually one bu one and adding them to our project, we will be using maven tool. (pom.xml)
//	--------------------------------
//	Components of the framework
//		resources:
//			configs --> configuration.properties file which contains url, username, password, etc.
//			drivers --> we don't need anymore
//			testdata --> excel files with different testing data.
//		utils:
//			CommonMethods.java --> methods to perform on web driver
//			ConfigsReader.java --> reading properties from configuration.properties file
//			Constants.java --> final variables (constants) for properties file path, testdata, reports, etc.
//			ExcelUtility.java --> methods to handle excel files
//		testbase:
//			BaseClass.java --> initialize the driver and quit it.
//			Listeners.java --> to listen every event happening at the code.
//		pages:
//			We follow POM and we store each page element in the respective java class.
//			LoginPageElements.java --> has the WebElements of the Login page.
//			DashboardPageElements.java --> has the WebElements of the Dashboard page.
//			Other pages...
//		testcases:
//			LoginTest.java
//			AddEmployeeTest.java
//			DisciplineTest.java
//			Other test...
//			In this package we have our test cases to test the functionality of our application.
//
//	target folder --> output/results of our test execution.
//	--------------------------------
//	maven repositories:
//		local (.m2)
//		remote (company based)
//		central (maven repository https://mvnrepository.com/)
//	
//	
//	

}
